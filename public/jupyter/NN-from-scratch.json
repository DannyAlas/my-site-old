{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Nerual Network From Scratch \n",
    "---\n",
    "## The goal is to create a neural network which identifies handwritten numbers using using only the NumPy and Pandas libraies.\n",
    "\n",
    "The dataset here is the well known MNIST handwritten digit dataset, commonly used for ML and computer vision projects. The data files contain gray-scale images of hand-drawn digits, from zero through nine. Each image is 28 pixels in height and 28 pixels in width, for a total of 784 pixels in total. Each pixel has a single pixel-value associated with it, indicating the lightness or darkness of that pixel, with higher numbers meaning darker. This pixel-value is an integer between 0 and 255, inclusive. [Data Source](https://www.kaggle.com/competitions/digit-recognizer/data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from matplotlib import pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data importing and formatting"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### First I will import the data using pandas. As you can see, each row corressponds to an example and each column to  a pixel value. Transpose the data such that the columns of the dataset represent examples and the rows represent the pixel data. This step is not necessary but I think it helps visualize each pixel going into one node.\n",
    "\n",
    "##### Next, I will create the training data, which I’ll feed the NN to train it, and then a development dataset which I’ll use later to ensure the NN isn’t overfitted to just the training data. These will be the X_train and X_dev respectively. The Y_train and Y_dev will be the same but only correspond to the labels of each example."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>label</th>\n",
       "      <th>pixel0</th>\n",
       "      <th>pixel1</th>\n",
       "      <th>pixel2</th>\n",
       "      <th>pixel3</th>\n",
       "      <th>pixel4</th>\n",
       "      <th>pixel5</th>\n",
       "      <th>pixel6</th>\n",
       "      <th>pixel7</th>\n",
       "      <th>pixel8</th>\n",
       "      <th>...</th>\n",
       "      <th>pixel774</th>\n",
       "      <th>pixel775</th>\n",
       "      <th>pixel776</th>\n",
       "      <th>pixel777</th>\n",
       "      <th>pixel778</th>\n",
       "      <th>pixel779</th>\n",
       "      <th>pixel780</th>\n",
       "      <th>pixel781</th>\n",
       "      <th>pixel782</th>\n",
       "      <th>pixel783</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41995</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41996</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41997</th>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41998</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41999</th>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>42000 rows × 785 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       label  pixel0  pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  pixel7  \\\n",
       "0          1       0       0       0       0       0       0       0       0   \n",
       "1          0       0       0       0       0       0       0       0       0   \n",
       "2          1       0       0       0       0       0       0       0       0   \n",
       "3          4       0       0       0       0       0       0       0       0   \n",
       "4          0       0       0       0       0       0       0       0       0   \n",
       "...      ...     ...     ...     ...     ...     ...     ...     ...     ...   \n",
       "41995      0       0       0       0       0       0       0       0       0   \n",
       "41996      1       0       0       0       0       0       0       0       0   \n",
       "41997      7       0       0       0       0       0       0       0       0   \n",
       "41998      6       0       0       0       0       0       0       0       0   \n",
       "41999      9       0       0       0       0       0       0       0       0   \n",
       "\n",
       "       pixel8  ...  pixel774  pixel775  pixel776  pixel777  pixel778  \\\n",
       "0           0  ...         0         0         0         0         0   \n",
       "1           0  ...         0         0         0         0         0   \n",
       "2           0  ...         0         0         0         0         0   \n",
       "3           0  ...         0         0         0         0         0   \n",
       "4           0  ...         0         0         0         0         0   \n",
       "...       ...  ...       ...       ...       ...       ...       ...   \n",
       "41995       0  ...         0         0         0         0         0   \n",
       "41996       0  ...         0         0         0         0         0   \n",
       "41997       0  ...         0         0         0         0         0   \n",
       "41998       0  ...         0         0         0         0         0   \n",
       "41999       0  ...         0         0         0         0         0   \n",
       "\n",
       "       pixel779  pixel780  pixel781  pixel782  pixel783  \n",
       "0             0         0         0         0         0  \n",
       "1             0         0         0         0         0  \n",
       "2             0         0         0         0         0  \n",
       "3             0         0         0         0         0  \n",
       "4             0         0         0         0         0  \n",
       "...         ...       ...       ...       ...       ...  \n",
       "41995         0         0         0         0         0  \n",
       "41996         0         0         0         0         0  \n",
       "41997         0         0         0         0         0  \n",
       "41998         0         0         0         0         0  \n",
       "41999         0         0         0         0         0  \n",
       "\n",
       "[42000 rows x 785 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.read_csv('data\\\\train.csv')\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>40990</th>\n",
       "      <th>40991</th>\n",
       "      <th>40992</th>\n",
       "      <th>40993</th>\n",
       "      <th>40994</th>\n",
       "      <th>40995</th>\n",
       "      <th>40996</th>\n",
       "      <th>40997</th>\n",
       "      <th>40998</th>\n",
       "      <th>40999</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>779</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>780</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>781</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>782</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>783</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>784 rows × 41000 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     0      1      2      3      4      5      6      7      8      9      \\\n",
       "0        0      0      0      0      0      0      0      0      0      0   \n",
       "1        0      0      0      0      0      0      0      0      0      0   \n",
       "2        0      0      0      0      0      0      0      0      0      0   \n",
       "3        0      0      0      0      0      0      0      0      0      0   \n",
       "4        0      0      0      0      0      0      0      0      0      0   \n",
       "..     ...    ...    ...    ...    ...    ...    ...    ...    ...    ...   \n",
       "779      0      0      0      0      0      0      0      0      0      0   \n",
       "780      0      0      0      0      0      0      0      0      0      0   \n",
       "781      0      0      0      0      0      0      0      0      0      0   \n",
       "782      0      0      0      0      0      0      0      0      0      0   \n",
       "783      0      0      0      0      0      0      0      0      0      0   \n",
       "\n",
       "     ...  40990  40991  40992  40993  40994  40995  40996  40997  40998  40999  \n",
       "0    ...      0      0      0      0      0      0      0      0      0      0  \n",
       "1    ...      0      0      0      0      0      0      0      0      0      0  \n",
       "2    ...      0      0      0      0      0      0      0      0      0      0  \n",
       "3    ...      0      0      0      0      0      0      0      0      0      0  \n",
       "4    ...      0      0      0      0      0      0      0      0      0      0  \n",
       "..   ...    ...    ...    ...    ...    ...    ...    ...    ...    ...    ...  \n",
       "779  ...      0      0      0      0      0      0      0      0      0      0  \n",
       "780  ...      0      0      0      0      0      0      0      0      0      0  \n",
       "781  ...      0      0      0      0      0      0      0      0      0      0  \n",
       "782  ...      0      0      0      0      0      0      0      0      0      0  \n",
       "783  ...      0      0      0      0      0      0      0      0      0      0  \n",
       "\n",
       "[784 rows x 41000 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = np.array(data)\n",
    "m, n = data.shape # m = rows n = cols\n",
    "np.random.shuffle(data) # Shuffle the data before splitting\n",
    "\n",
    "data_dev = data[0:1000].T # Of the first 1000 rows, rotate (transpose) the dataframe so that they are now columns\n",
    "Y_dev = data_dev[0] # This is the label row\n",
    "X_dev = data_dev[1:n] # These are the pixel data rows (values 0,255)\n",
    "\n",
    "data_train = data[1000:m].T # Of the rows after 100, traspose that dataframe so that they are now columns\n",
    "Y_train = data_train[0] # Define the label row\n",
    "X_train = data_train[1:n] # Define the pixel data rows\n",
    "\n",
    "pd.DataFrame(X_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Each pixel data value corresponds to a range between 0 and 255 with 0 being white and 255 black. For future calculation, it’s easier if this value is converted to a range between 0 and 1 which can be done by dividing each value in the array by 255."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>40990</th>\n",
       "      <th>40991</th>\n",
       "      <th>40992</th>\n",
       "      <th>40993</th>\n",
       "      <th>40994</th>\n",
       "      <th>40995</th>\n",
       "      <th>40996</th>\n",
       "      <th>40997</th>\n",
       "      <th>40998</th>\n",
       "      <th>40999</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>779</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>780</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>781</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>782</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>783</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>784 rows × 41000 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     0      1      2      3      4      5      6      7      8      9      \\\n",
       "0      0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   \n",
       "1      0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   \n",
       "2      0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   \n",
       "3      0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   \n",
       "4      0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   \n",
       "..     ...    ...    ...    ...    ...    ...    ...    ...    ...    ...   \n",
       "779    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   \n",
       "780    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   \n",
       "781    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   \n",
       "782    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   \n",
       "783    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   \n",
       "\n",
       "     ...  40990  40991  40992  40993  40994  40995  40996  40997  40998  40999  \n",
       "0    ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0  \n",
       "1    ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0  \n",
       "2    ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0  \n",
       "3    ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0  \n",
       "4    ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0  \n",
       "..   ...    ...    ...    ...    ...    ...    ...    ...    ...    ...    ...  \n",
       "779  ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0  \n",
       "780  ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0  \n",
       "781  ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0  \n",
       "782  ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0  \n",
       "783  ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0  \n",
       "\n",
       "[784 rows x 41000 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_dev = X_dev / 255 \n",
    "X_train = X_train / 255\n",
    "pd.DataFrame(X_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## NN Explanation\n",
    "\n",
    "I attempt to touch on all the basics here so it's a bit lengthy\n",
    "\n",
    "Now it’s time to create the NN. This NN will consist of 3 layers, the first is an input layer which will just be the value of each pixel in an example. There are 784-pixel values per example and thus this layer will have 784 nodes. Since our training dataset already contains 784 values per node, this can be used to represent the nodes instead of wasting memory creating a new node array.\n",
    "\n",
    "Next will be the hidden layer, this layer will take the values from the input layer and perform a linear operation with each node’s set of weights and biases. These weights and biases are the parameters the network will tune to optimize the output, to *learn*. This layer will only need to consist of 10 nodes though. Each node corresponding to an output of the numbers 1-10, as we will be labeling.\n",
    "\n",
    "The weights will be a random number between -0.5 and 0.5 to be tuned through backward propagation, which will be set up later. The weights can be implemented as a matrix $w$ with dimensions of the current layers nodes ($nodes^{[l]}$) by previous layers nodes ($nodes^{[l-1]}$) ie $nodes^{[l]} \\times nodes^{[l-1]}$ which for the hidden layer would be $10\\times784$. Biases are the constants added to each node, so they can be represented as matrix $b$ with dimensions $nodes^{[l]}\\times 1$.\n",
    "\n",
    "The weights and biases will be combined with the input to nodes using the following linear equation $$nodes^{[l]} = w^{[l]}\\times input+b^{[l]}$$ To implement this a operation, a for loop could be used but this would result in time complexity of $\\Omega(s*n*m*n)$ where $s$ is the iterations, $m$ is the dataset sample number, and $n$ is the dataset feature number. A much more efficient method for performing the function would be the vectorized implementation which you can read more about it in Yang Liu’s - [Vectorization Implementation in Machine Learning](https://towardsdatascience.com/vectorization-implementation-in-machine-learning-ca652920c55d). To do this, we just obtain the dot product of the input and weights matacies (which are actually NumPy arrays). This will return a new matrix $10\\times \\text{example length}$ which represents the $w^{[l]}\\times input$ part of the linear expression for all the examples.\n",
    "\n",
    "The bias, if you remember has dimensions $nodes^{[l]}\\times 1$ which is equivalent to $1\\times10$ for this layer. Each example in our new matrix is also $1\\times10$ so we can perform a simple matrix addition of $b+example^{[x]}$ for all examples in the matrix.\n",
    "\n",
    "Before moving on, we need to apply one more function to this layer. So far we have only performed linear functions on this layer but to ensure we're not just creating a linear regression model, we’ll apply an activation function. In this case, I intend to use the activation function known as Rectified Linear Unit or ReLU. This function is to be applied to each of our nodes in the hidden layer before being passed on to the last layer.\n",
    "\n",
    "- ReLU is a pretty simple function it takes in an input $x$ and returns $x$ if $x>0$ and returns $0$ if $x<0$\n",
    "<h3 align=\"center\">ReLU Example</h3>\n",
    "<p align=\"center\">\n",
    "    <img src=\"https://raw.githubusercontent.com/DannyAlas/Neural-Network-1/main/img/ReLU.png\" alt=\"ReLU\" width=\"300\" />\n",
    "</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def params():\n",
    "    weightsH = np.random.randn(10, 784) # Initialize a matrix of weights for the hidden layer (784 in : 10 out)\n",
    "    biasH = np.random.randn(10, 1) # Initialize biasis for the 10 hidden layer nodes\n",
    "    \n",
    "    weightsO = np.random.randn(10, 10) # Initialize weights for ouptut layer\n",
    "    biasO = np.random.randn(10, 1) # Initialize biasis for output layer\n",
    "\n",
    "    return weightsH, biasH, weightsO, biasO\n",
    "\n",
    "def ReLU(E):\n",
    "    return np.maximum(E, 0) # Returns E if E>0 and 0 if E<0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For the final layer of the NN, the output, we want to perform the same linear expression for the nodes but the output this time needs to be a list of probabilities for each label. This can be done with a [Softmax function](https://en.wikipedia.org/wiki/Softmax_function). Here's a wonderful visualization of what's going on by [Dario Radečić](https://towardsdatascience.com/softmax-activation-function-explained-a7e1bc3ad60)\n",
    "<p align=\"center\">\n",
    "    <img src=\"https://miro.medium.com/max/700/1*ReYpdIZ3ZSAPb2W8cJpkBg.jpeg\" alt=\"Softmax\" width=\"500\" />\n",
    "</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def softMax(E):\n",
    "    x = np.exp(E) / sum(np.exp(E)) # Given the input of a matrix, returns probabilty of each value  \n",
    "    return x\n",
    "\n",
    "def prop(weightsH, biasH, weightsO, biasO, X):\n",
    "    net1 = weightsH.dot(X) + biasH # weights * input + bias (net)\n",
    "    out1 = ReLU(net1) # output through activation function (node output)\n",
    "    net2 = weightsO.dot(out1) + biasO # weight * previous node output + bias\n",
    "    pred = softMax(net2) # label prediction given the net2 matrix\n",
    "    return net1, out1, net2, pred   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Backwards Propagation\n",
    "\n",
    "Now that we have the NN, we need it to *learn*, we need it to adjust its values over time to increase its accuracy. This is done through a method known as Backwards propagation, where we go through the nodes and adjust the parameters in such a way that we obtain better results.\n",
    "There are a few different methods to adjust the values in backward propagation but in this case, I'll use [Gradient Descent.](https://towardsdatascience.com/gradient-descent-algorithm-a-deep-dive-cf04e8115f21) Basically, we want to change a parameter, call it $X$, such that the error, $E$, decreases. A good way to do this is $$\\alpha \\frac{\\partial E}{\\partial X}$$ that is we need to find the derivative of $E$ with respect to $X$. Also, α is a parameter in the range [0,1] known as the **learning rate** which is set by us and allows us to scale the *step size* of the gradient descent. We can obtain the error, $E$, by just taking the log of the probability given for the correct prediction, $Y$, for a given $X$. $$E = \\log(Y^{[x]})$$ In other words, for an example in the dataset, the error will be the log of the probability given for the correct prediction. We can then take the derivative of this error and subtract it from the parameter.\n",
    "\n",
    "Then, to calculate $\\partial W^{[1]}$ (derivative of weight for the hidden layer) and $\\partial B^{[1]}$ (for bias), we'll first find $\\partial X^{[1]}$.\n",
    "Let $g$ = activation function:\n",
    "\n",
    "$$\\partial X^{[1]} = W^{[2]T} \\partial X^{[2]} .* g^{[1]\\prime} (X^{[1]})$$\n",
    "\n",
    "We then apply the weights between the hidden layer and output layer in reverse and perform an element-wise multiplication with the derivative of the activation function, akin to \"undoing\" it, to get the correct error values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def ReLU_deriv(x):\n",
    "    return x > 0\n",
    "\n",
    "def oneHot(Y):\n",
    "    \"\"\"\n",
    "    Given the input lables creates a matrix of zeros transposed such that rows corralate to number of labels and columns corralate to the data length. \n",
    "    Then for each column, the row that corraltes to its label value-1 (since labels start at 1 but rows in the matrix start at 0) gets filled in with a 1. \n",
    "    Thus returning a list of zeros with a 1 in the position of the label\n",
    "    5 = [0,0,0,0,5,0,0,0,0,0]\n",
    "    \"\"\"\n",
    "    one_hot_Y = np.zeros((Y.size, Y.max() + 1)) # Create the matrix filled with zeros\n",
    "    one_hot_Y[np.arange(Y.size), Y] = 1 # Replaces 0 with 1 where the row matches the label - 1\n",
    "    one_hot_Y = one_hot_Y.T # transposes the matrix, now rows = labels\n",
    "    return one_hot_Y\n",
    "\n",
    "def error(weightsO, pred, net1, out1, net2, X, Y):\n",
    "    # Working backwords determine the error (delta) based on label\n",
    "    oneHot_Y = oneHot(Y)\n",
    "    error = pred - oneHot_Y\n",
    "    d_WO = 1 / m * error.dot(out1.T)\n",
    "    d_BO = 1 / m * np.sum(error)\n",
    "    d_net1 = weightsO.T.dot(error) * ReLU_deriv(net1)\n",
    "    d_WH = 1 / m * d_net1.dot(X.T)\n",
    "    d_BH = 1 / m * np.sum(d_net1)\n",
    "    return d_WH, d_BH, d_WO, d_BO\n",
    "\n",
    "def updater(weightsH, biasH, weightsO, biasO, d_WO, d_BO, d_WH, d_BH, alpha):\n",
    "    # Update the weights and biases given the erros deltas\n",
    "    weightsH = weightsH - alpha * d_WH\n",
    "    biasH = biasH - alpha * d_BH\n",
    "    weightsO = weightsO - alpha * d_WO\n",
    "    biasO = biasO - alpha * d_BO\n",
    "    return weightsH, biasH, weightsO, biasO"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "That's it. Now lets just run the network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def prediction(pred):\n",
    "    return np.argmax(pred, 0)\n",
    "\n",
    "def get_accuracy(predictions, Y):\n",
    "    return round(np.sum(predictions == Y) / Y.size, 4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "accuracy = []\n",
    "def gradient_descent(X, Y, alpha, epochs): # X = training data, Y = labels, alpha = learning rate, epochs = iterations\n",
    "    \"\"\"\n",
    "    First initializes the weights and biases then\n",
    "    \n",
    "    For number of epochs set, \n",
    "        propogates the network forward calculating the output \n",
    "        calculates the error from the output\n",
    "        updates the weights and biases based on error\n",
    "        repates\n",
    "    \"\"\"\n",
    "    weightsH, biasH, weightsO, biasO = params()\n",
    "    \n",
    "    for i in range(epochs):\n",
    "        net1, out1, net2, pred = prop(\n",
    "            weightsH, \n",
    "            biasH, \n",
    "            weightsO, \n",
    "            biasO, \n",
    "            X\n",
    "            )\n",
    "        d_WH, d_BH, d_WO, d_BO = error(\n",
    "            weightsO,\n",
    "            pred, \n",
    "            net1, \n",
    "            out1, \n",
    "            net2, \n",
    "            X, \n",
    "            Y\n",
    "            )\n",
    "        \n",
    "        weightsH, biasH, weightsO, biasO = updater(\n",
    "            weightsH, \n",
    "            biasH, \n",
    "            weightsO, \n",
    "            biasO, \n",
    "            d_WO, \n",
    "            d_BO, \n",
    "            d_WH, \n",
    "            d_BH, \n",
    "            alpha\n",
    "            )\n",
    "        accuracy.append(get_accuracy(prediction(pred), Y))\n",
    "        if i % 100 == 0:\n",
    "            print(\"Epoch: \", i)\n",
    "            print(get_accuracy(prediction(pred), Y))\n",
    "    return weightsH, biasH, weightsO, biasO"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch:  0\n",
      "0.1062\n",
      "Epoch:  100\n",
      "0.1791\n",
      "Epoch:  200\n",
      "0.1989\n",
      "Epoch:  300\n",
      "0.2325\n",
      "Epoch:  400\n",
      "0.2845\n",
      "Epoch:  500\n",
      "0.3425\n",
      "Epoch:  600\n",
      "0.3964\n",
      "Epoch:  700\n",
      "0.4609\n",
      "Epoch:  800\n",
      "0.5154\n",
      "Epoch:  900\n",
      "0.5525\n",
      "Epoch:  1000\n",
      "0.5829\n"
     ]
    }
   ],
   "source": [
    "weightsH, biasH, weightsO, biasO = gradient_descent(X_train, Y_train, 0.10, 1001)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "fisrt_accuracy = pd.DataFrame(accuracy)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It learned! let's see if we can adjust some parameters to improve its accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch:  0\n",
      "0.0841\n",
      "Epoch:  100\n",
      "0.3268\n",
      "Epoch:  200\n",
      "0.3881\n",
      "Epoch:  300\n",
      "0.4609\n",
      "Epoch:  400\n",
      "0.5212\n",
      "Epoch:  500\n",
      "0.5609\n",
      "Epoch:  600\n",
      "0.5863\n",
      "Epoch:  700\n",
      "0.6095\n",
      "Epoch:  800\n",
      "0.63\n",
      "Epoch:  900\n",
      "0.6507\n",
      "Epoch:  1000\n",
      "0.6673\n",
      "Epoch:  1100\n",
      "0.683\n",
      "Epoch:  1200\n",
      "0.6979\n",
      "Epoch:  1300\n",
      "0.7131\n",
      "Epoch:  1400\n",
      "0.7246\n",
      "Epoch:  1500\n",
      "0.7356\n",
      "Epoch:  1600\n",
      "0.7445\n",
      "Epoch:  1700\n",
      "0.7522\n",
      "Epoch:  1800\n",
      "0.7591\n",
      "Epoch:  1900\n",
      "0.7653\n",
      "Epoch:  2000\n",
      "0.7708\n",
      "Epoch:  2100\n",
      "0.7758\n",
      "Epoch:  2200\n",
      "0.7812\n",
      "Epoch:  2300\n",
      "0.7859\n",
      "Epoch:  2400\n",
      "0.7905\n",
      "Epoch:  2500\n",
      "0.7952\n",
      "Epoch:  2600\n",
      "0.7994\n",
      "Epoch:  2700\n",
      "0.8035\n",
      "Epoch:  2800\n",
      "0.8069\n",
      "Epoch:  2900\n",
      "0.8099\n",
      "Epoch:  3000\n",
      "0.8125\n",
      "Epoch:  3100\n",
      "0.8153\n",
      "Epoch:  3200\n",
      "0.8173\n",
      "Epoch:  3300\n",
      "0.8198\n",
      "Epoch:  3400\n",
      "0.8219\n",
      "Epoch:  3500\n",
      "0.8243\n",
      "Epoch:  3600\n",
      "0.827\n",
      "Epoch:  3700\n",
      "0.8278\n",
      "Epoch:  3800\n",
      "0.831\n",
      "Epoch:  3900\n",
      "0.8356\n",
      "Epoch:  4000\n",
      "0.831\n",
      "Epoch:  4100\n",
      "0.8085\n",
      "Epoch:  4200\n",
      "0.8366\n",
      "Epoch:  4300\n",
      "0.8397\n",
      "Epoch:  4400\n",
      "0.841\n",
      "Epoch:  4500\n",
      "0.845\n",
      "Epoch:  4600\n",
      "0.8317\n",
      "Epoch:  4700\n",
      "0.845\n",
      "Epoch:  4800\n",
      "0.8472\n",
      "Epoch:  4900\n",
      "0.8144\n",
      "Epoch:  5000\n",
      "0.8485\n"
     ]
    }
   ],
   "source": [
    "weightsH1, biasH1, weightsO1, biasO1 = gradient_descent(X_train, Y_train, 0.20, 5001)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "second_accuracy = pd.DataFrame(accuracy)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Adjusting the learning rate and epochs resulted in a better prediction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Let's visualize the differences"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_predictions(X, weightsH, biasH, weightsO, biasO):\n",
    "    _, _, _, pred = prop(weightsH, biasH, weightsO, biasO, X)\n",
    "    predictions = prediction(pred)\n",
    "    return predictions\n",
    "\n",
    "def test_prediction(index, weightsH, biasH, weightsO, biasO):\n",
    "    image = X_train[:, index, None]\n",
    "    prediction = make_predictions(X_train[:, index, None], weightsH, biasH, weightsO, biasO)\n",
    "    label = Y_train[index]\n",
    "    print(\"Prediction: \", prediction)\n",
    "    print(\"Label: \", label)\n",
    "    \n",
    "    image = image.reshape((28, 28)) * 255\n",
    "    plt.imshow(image, interpolation='nearest')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction:  [7]\n",
      "Label:  9\n"
     ]
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction:  [9]\n",
      "Label:  9\n"
     ]
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction:  [6]\n",
      "Label:  6\n"
     ]
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction:  [6]\n",
      "Label:  6\n"
     ]
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "test_prediction(0, weightsH, biasH, weightsO, biasO)\n",
    "test_prediction(0, weightsH1, biasH1, weightsO1, biasO1)\n",
    "test_prediction(1, weightsH, biasH, weightsO, biasO)\n",
    "test_prediction(1, weightsH1, biasH1, weightsO1, biasO1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's plot the learning accuracy over epochs to see how the NN learned"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1cf1ba59d20>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "plt.figure(figsize=(12,6))\n",
    "sns.set_theme(style=\"darkgrid\")\n",
    "sns.color_palette(\"pastel\")\n",
    "\n",
    "p = sns.lineplot(data=fisrt_accuracy, legend=False)\n",
    "p.set_xlabel(\"Epochs\")\n",
    "p.set_ylabel(\"Accuracy\")\n",
    "plt.legend(labels=[\"Learning Rate: 0.10\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,6))\n",
    "sns.set_theme(style=\"darkgrid\")\n",
    "sns.set(font_scale = 2)\n",
    "p = sns.lineplot(data=second_accuracy) \n",
    "p.set_xlabel(\"Epochs\")\n",
    "p.set_ylabel(\"Accuracy\")\n",
    "plt.title(\"NN Learning Curve\")\n",
    "plt.legend(labels=[\"Learning Rate: 0.20\"])\n",
    "plt.savefig(\"./img/NN_Learning_Curve.png\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There seemed to be an interesting drop in accuracy, almost like a reset at epoch 1000. Could be due to the higher learning rate but best to investigate further."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>0.5787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1000</th>\n",
       "      <td>0.5829</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1001</th>\n",
       "      <td>0.0841</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1002</th>\n",
       "      <td>0.1041</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1003</th>\n",
       "      <td>0.1101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1004</th>\n",
       "      <td>0.1169</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1005</th>\n",
       "      <td>0.1219</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1006</th>\n",
       "      <td>0.1250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1007</th>\n",
       "      <td>0.1269</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1008</th>\n",
       "      <td>0.1312</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1009</th>\n",
       "      <td>0.1366</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1010</th>\n",
       "      <td>0.1427</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1011</th>\n",
       "      <td>0.1495</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1012</th>\n",
       "      <td>0.1531</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1013</th>\n",
       "      <td>0.1573</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1014</th>\n",
       "      <td>0.1600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1015</th>\n",
       "      <td>0.1624</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1016</th>\n",
       "      <td>0.1644</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1017</th>\n",
       "      <td>0.1667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1018</th>\n",
       "      <td>0.1781</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1019</th>\n",
       "      <td>0.1847</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1020</th>\n",
       "      <td>0.1886</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1021</th>\n",
       "      <td>0.1925</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1022</th>\n",
       "      <td>0.1960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1023</th>\n",
       "      <td>0.1992</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1024</th>\n",
       "      <td>0.2025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1025</th>\n",
       "      <td>0.2059</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1026</th>\n",
       "      <td>0.2095</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1027</th>\n",
       "      <td>0.2123</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1028</th>\n",
       "      <td>0.2147</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1029</th>\n",
       "      <td>0.2175</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           0\n",
       "999   0.5787\n",
       "1000  0.5829\n",
       "1001  0.0841\n",
       "1002  0.1041\n",
       "1003  0.1101\n",
       "1004  0.1169\n",
       "1005  0.1219\n",
       "1006  0.1250\n",
       "1007  0.1269\n",
       "1008  0.1312\n",
       "1009  0.1366\n",
       "1010  0.1427\n",
       "1011  0.1495\n",
       "1012  0.1531\n",
       "1013  0.1573\n",
       "1014  0.1600\n",
       "1015  0.1624\n",
       "1016  0.1644\n",
       "1017  0.1667\n",
       "1018  0.1781\n",
       "1019  0.1847\n",
       "1020  0.1886\n",
       "1021  0.1925\n",
       "1022  0.1960\n",
       "1023  0.1992\n",
       "1024  0.2025\n",
       "1025  0.2059\n",
       "1026  0.2095\n",
       "1027  0.2123\n",
       "1028  0.2147\n",
       "1029  0.2175"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "second_accuracy[999:1030]"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.10.4 64-bit",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "26de051ba29f2982a8de78e945f0abaf191376122a1563185a90213a26c5da77"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
