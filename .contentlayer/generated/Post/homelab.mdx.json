{
  "title": "My Home Lab",
  "date": "2023-04-01T00:00:00.000Z",
  "thumbnail": "https://cdn.destiny.gg//2.67.3//emotes//62c301c2f1ac2.gif",
  "tags": [],
  "body": {
    "raw": "# Eris: The Lab\r\n<center>\r\n![xkcd file transfer](https://imgs.xkcd.com/comics/file_transfer.png)\r\n</center>\r\nNamed after the greek god of chaos for what will become self-explanatory reasons, Eris is the Lab in its totality. Ideally, one day, if there is a service I need to run, I can call Eris, like Tony Stark calls \"Jarvis\" to do it for me. I just think it would be so cool to be to say, \"Hey Eris, deploy this discord bot for me,\" and five minutes later, I have a discord bot, though we're a long way off from that. Also note I have a habit of naming most applications by the name of mythological, usually greek gods - much to the behest of Richard - Deal with it Richard!\r\n\r\nEris currently consists of everything I have running on both physical and cloud infrastructure. Here's a breakdown of the main categories, which we can delve deeper into later.\r\n\r\n- Gaming Servers: Hades\r\n- Media Server: Apollo\r\n- Deployment Environments: Artemis\r\n- Utilities: Hephaestus\r\n- Management Infrastructure: Hera\\\r\n\r\nEach of these services is constantly being tweaked as new projects can often require functionality I still need to add. Thus I've opted not to create super fleshed-out services but instead base the entire Lab around development principles that are easily mutable.\r\n\r\nThe services are also as infrastructure agnostic as possible, leaving it up to me currently, but hopefully, Hera will decide how to deploy each service best in the future. For example, the media servers consist of cloud-based 'totally legal' seedboxes, physical media storage servers, and physical Jellyfin and Nextcloud servers to host the media. Each of these should ideally be managed by Hera to scale and provide as needed.\r\n\r\n## Networking\r\n\r\nBefore we delve into the physical hardware and then services, it's important to get an overview of the network. I have a few different subnets, each with their own purpose. The three main subnets are all we'll focus on here. The first is the internal subnet, which is used for all internal services such as GitLab and smart-home devices. The second is the external subnet, which is used for all public-facing services, like Plex and NextCloud. The third is the management subnet, which is used for all management services, like the DHCP server, Nginx proxy, and email server.\r\n\r\nMy physical network is pretty simple and composed of a single 15-port Cisco switch, which is connected to my router. The router is currently a store-bought router flashed with OpenWRT, but I'm planning on moving to OPNsense soon as I like the UI/UX more. I have a few VLANs set up on the switch, which is used to separate the different subnets. The switch is also connected to a few I.O.T. devices, like my Raspberry Pi and Pico, which are used for various projects. The Pico actually runs PiHole, which acts as my local DNS and is used to block ads on my network and among other things, the Pi 4 runs my DHCP server.\r\n\r\n## Physical Servers\r\n\r\nWith that all said, let's get to the bare bones of what actually runs everything. I have two physical servers, both composed of old desktops I no longer use. I also have a Raspberry Pi 4 and Pico, alongside a few other I.O.T. devices. Both of my main servers are running ProxMox, which is a virtualization platform that allows me to run multiple VMs on a single physical server.\r\n\r\n### Server 1: Zeus\r\n*THE FATHER OF ALL*\r\n> Specs: Intel i7-6700k, 16GB DDR4, 1x 2TB SSD, 3x 2TB HDD, 2x 1TB HDD\r\n\r\nZeus is my main server, and it runs Proxmox and is where I host most of my services. Zeus is the first server I ever built, and it's been through a lot. He's spent much time with no case, He's had an AIO leak that broke a motherboard and CPU and two freak random RAM-breaking incidents. He's getting old... but still kicking on strong as ever.\r\n\r\nI have quite a few VM's running on Zeus, but the main ones are\r\n\r\n- The Storage server | TrueNas Scale\r\n- The Jellyfin server | Ubuntu 22.04\r\n- The Nextcloud server | Ubuntu 20.04\r\n- The Plex server | Ubuntu 22.04\r\n\r\n### Server 2: Poseidon\r\n*THE GOD OF THE SEA*\r\n\r\n> Specs: AMD FX 6300, 8GB DDR3, 250GB SSD, 2x 1TB HDD\r\n\r\nPoseidon is my backup server. Hosting my backup VMs and mirrors, as well as some utilities like an email server and NGINX proxy.\r\n\r\n### Hades: The Gaming Servers\r\n*THE GOD OF THE UNDERWORLD, and mischief...*\r\n\r\nAs an avid game player, it's nice to be the one to provide a place where friends can all game together without the worry of cost, complexity, or administration. This all comes down to Hades to provide from the underworld...\r\n\r\nHades is currently one large python script run in a docker container that can create Minecraft, Rust, Valheim, and other game servers. Though most servers are more often created by hand, the Minecraft server was what started this whole shebang, and It's pretty automated at this point. Here's an overview of how it works.\r\n\r\nThe majority of Hades' code is actually dedicated to gaming the cloud 'new-account-credit' system. He's a bit mischievous, you see, most cloud providers offer a free credit, often $200, to new accounts created on the platform. This is meant to attract new users, but as a college student, I see free game servers. While I won't talk too much about the specifics, it simply does four things:\r\n\r\n- Creates new user emails, contact info, and crucially credit card information\r\n- Using Selenium, signs up as a new user to one of the cloud providers with free credit available\r\n- In the browser, creates and provisions the server, saving the ssh keys\r\n- Using the key, deploys a custom Minecraft server in docker with ITZG's docker-minecraft-server and transfer files over sftp.\r\n\r\n> NOTE: Using a browser to automate provisioning was a BIG mistake and cuased MANY of headaches \r\n> \r\n> “Short cuts make long delays.” ― J.R.R. Tolkien\r\n\r\n## Management\r\nThis is mostly handled by Hera, but I'll go over the basics.\r\n\r\nOnce the server is up, it must undergo some basic management, my local key management database can automatically find the required credentials to ssh into a server whenever needed manually, but I have also created some scripts to automate parts of this for me. For example, almost every Minecraft server I have uses a base set of plugins. I have the configs for these saved in Hades' plugin database, which now automatically uploads the best config for the installed plugins to simplify the startup management.\r\n\r\nTo manage the domains and server IPs, I host all my domains on Cloudflare. Hera can detect when a new server is made by Hades and use the Cloudflare API to update the DNS records for the required domains as needed.\r\n\r\nWhile not the prettiest of solutions, Hades can now almost automatically deploy a free Minecraft server in minutes. I've recently been adding a feature to move the server to a new account once the 'free credits' are up, as longer-running servers are currently moved manually. Rust and Valheim servers are started less frequently and thus really only take advantage of Hades' free server provisioning features; the startup and management are much more manual.\r\n\r\n### Apollo: The Media Server\r\n*THE SON OF ZEUS AND LEADER OF THE MUSES*\r\n<center>\r\n![xkcd sony microsoft mpaa riaa apple](https://imgs.xkcd.com/comics/sony_microsoft_mpaa_riaa_apple.jpg)\r\n</center>\r\nApollo is, at its core, a Jellyfin server, but it also hosts a Nextcloud instance, a Plex server, and a few other services. It was one of the first things I virtualized on Zeus, hence the name, and it's one of a few public-facing services. It hosts all the media I have for my family and friends to access as well as a cloud storage solution for them to use.\r\n\r\nI use both Jellyfin and Plex since, while I prefer the simplicity of Jellyfin, It doesn't have good app support, especially for TVs. Plex is not my favorite, but it has much better app support, so my family members can use it to stream to their TVs and phones. Running both is not very compute-intensive, and it's a good enough solution for now.\r\n\r\nThe Jellyfin server is the main media server, and it's hosted as a VM on my physical machine: Zeus. It's a pretty standard setup. The media is stored on my personal storage server, which is also a VM on Zeus. The storage server is a simple TrueNas Scale server which the Jellyfin server is also backed up to with rsync. Plex is basically the same setup.\r\n\r\nThe Nextcloud server is also hosted on the same machine as the Jellyfin server, and it's used to provide a cloud storage solution for my family and friends. It's also used to host a few other services, like a password manager.\r\n\r\nThe Seedbox is a cloud-based service that I use to download media from the internet. It's a pretty standard setup, and it's hosted on a cloud provider with free credit. I happened to get lucky with the cloud provider giving me a year of free service, but after that, I'll probably move to a self-hosted seedbox.\r\n\r\n### Artemis: The Deployment Environment\r\n*THE GODDESS OF BIRTHING*\r\n\r\nArtemis gives life to my code. She is a collection of tools I use to deploy my applications. I host my own GitLab instance here, which is used to host my personal projects and to host my own GitLab CI/CD pipelines. It's hosted on a VM on my physical machine: Zeus, with backups to my storage server. I also host some non-GitLab CD pipelines, which are a collection of bash scripts and Ansible playbooks that are run whenever I push to a specific repository. These pipelines are used to deploy my applications to my physical servers.\r\n\r\nSome of the applications I host are:\r\n\r\n- Personal website\r\n- Discord bots\r\n- Web scraping scripts\r\n- Small Minecraft server\r\n- Email server\r\n- A few other small projects\r\n\r\n### Hephaestus: The Utility Server\r\n*THE GOD OF FIRE, METALWORKING, AND TECHNOLOGY*\r\n\r\nHephaestus is a utility service that I use to manage a few small services. It's hosted on a VM on my physical machine: Zeus, with backups to my storage server. It manages a few utilities like my DHCP server, DNS server, email server, and a few other small services. One of its important hosts is Hestia, which I use to manage my ssh keys.\r\n\r\n### Hestia: The Key Management Database\r\n*THE GODDESS OF HEARTH*\r\n\r\nHestia is a simple database that I use to manage my ssh keys. It's hosted on a VM on my physical machine: Zeus, with backups to my storage server. It's a simple Flask app that uses a SQLite database to store the ssh keys for my servers. It's used by Hera to get the ssh keys for a server whenever needed and can upload them to an ssh-agent. It's also used by my compute swarm to get the ssh keys for the VMs in the swarm.\r\n\r\n### Hera: The Management Infrastructure\r\n*THE GODDESS OF THE HOME*\r\n\r\nHera is the newest and least stable part of my infrastructure. It's a collection of Ansible playbooks that I use to manage my infrastructure. It's still in development, but her main purpose is to simplify the management of my infrastructure. She’s also, as mentioned before, meant to be infrastructure agnostic, so I can deploy it to any server, and it will work. She’s currently hosted as a Debian VM on my physical machine: Zeus, with backups to my storage server.\r\n\r\nHer core functionality is to manage my physical servers, and is currently able to do the following:\r\n\r\n- Install and configure basic NGINX, NodeJS, and Docker setups for a server\r\n- Obtain the ssh keys for a server from the Key Management Database\r\n- Simple server management like starting, stopping, and restarting servers\r\n- very basic command line interface to manage the servers",
    "code": "var Component=(()=>{var d=Object.create;var r=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var y=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),v=(t,e)=>{for(var n in e)r(t,n,{get:e[n],enumerable:!0})},o=(t,e,n,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of u(e))!f.call(t,a)&&a!==n&&r(t,a,{get:()=>e[a],enumerable:!(i=m(e,a))||i.enumerable});return t};var g=(t,e,n)=>(n=t!=null?d(p(t)):{},o(e||!t||!t.__esModule?r(n,\"default\",{value:t,enumerable:!0}):n,t)),b=t=>o(r({},\"__esModule\",{value:!0}),t);var h=y((D,l)=>{l.exports=_jsx_runtime});var T={};v(T,{default:()=>k,frontmatter:()=>w});var s=g(h()),w={title:\"My Home Lab\",date:new Date(16803072e5),thumbnail:\"https://cdn.destiny.gg//2.67.3//emotes//62c301c2f1ac2.gif\",tags:[]};function c(t){let e=Object.assign({h1:\"h1\",p:\"p\",img:\"img\",ul:\"ul\",li:\"li\",h2:\"h2\",h3:\"h3\",em:\"em\",blockquote:\"blockquote\"},t.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h1,{children:\"Eris: The Lab\"}),`\n`,(0,s.jsx)(\"center\",{children:(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:\"https://imgs.xkcd.com/comics/file_transfer.png\",alt:\"xkcd file transfer\"})})}),`\n`,(0,s.jsx)(e.p,{children:`Named after the greek god of chaos for what will become self-explanatory reasons, Eris is the Lab in its totality. Ideally, one day, if there is a service I need to run, I can call Eris, like Tony Stark calls \"Jarvis\" to do it for me. I just think it would be so cool to be to say, \"Hey Eris, deploy this discord bot for me,\" and five minutes later, I have a discord bot, though we're a long way off from that. Also note I have a habit of naming most applications by the name of mythological, usually greek gods - much to the behest of Richard - Deal with it Richard!`}),`\n`,(0,s.jsx)(e.p,{children:\"Eris currently consists of everything I have running on both physical and cloud infrastructure. Here's a breakdown of the main categories, which we can delve deeper into later.\"}),`\n`,(0,s.jsxs)(e.ul,{children:[`\n`,(0,s.jsx)(e.li,{children:\"Gaming Servers: Hades\"}),`\n`,(0,s.jsx)(e.li,{children:\"Media Server: Apollo\"}),`\n`,(0,s.jsx)(e.li,{children:\"Deployment Environments: Artemis\"}),`\n`,(0,s.jsx)(e.li,{children:\"Utilities: Hephaestus\"}),`\n`,(0,s.jsx)(e.li,{children:\"Management Infrastructure: Hera\\\\\"}),`\n`]}),`\n`,(0,s.jsx)(e.p,{children:\"Each of these services is constantly being tweaked as new projects can often require functionality I still need to add. Thus I've opted not to create super fleshed-out services but instead base the entire Lab around development principles that are easily mutable.\"}),`\n`,(0,s.jsx)(e.p,{children:\"The services are also as infrastructure agnostic as possible, leaving it up to me currently, but hopefully, Hera will decide how to deploy each service best in the future. For example, the media servers consist of cloud-based 'totally legal' seedboxes, physical media storage servers, and physical Jellyfin and Nextcloud servers to host the media. Each of these should ideally be managed by Hera to scale and provide as needed.\"}),`\n`,(0,s.jsx)(e.h2,{children:\"Networking\"}),`\n`,(0,s.jsx)(e.p,{children:\"Before we delve into the physical hardware and then services, it's important to get an overview of the network. I have a few different subnets, each with their own purpose. The three main subnets are all we'll focus on here. The first is the internal subnet, which is used for all internal services such as GitLab and smart-home devices. The second is the external subnet, which is used for all public-facing services, like Plex and NextCloud. The third is the management subnet, which is used for all management services, like the DHCP server, Nginx proxy, and email server.\"}),`\n`,(0,s.jsx)(e.p,{children:\"My physical network is pretty simple and composed of a single 15-port Cisco switch, which is connected to my router. The router is currently a store-bought router flashed with OpenWRT, but I'm planning on moving to OPNsense soon as I like the UI/UX more. I have a few VLANs set up on the switch, which is used to separate the different subnets. The switch is also connected to a few I.O.T. devices, like my Raspberry Pi and Pico, which are used for various projects. The Pico actually runs PiHole, which acts as my local DNS and is used to block ads on my network and among other things, the Pi 4 runs my DHCP server.\"}),`\n`,(0,s.jsx)(e.h2,{children:\"Physical Servers\"}),`\n`,(0,s.jsx)(e.p,{children:\"With that all said, let's get to the bare bones of what actually runs everything. I have two physical servers, both composed of old desktops I no longer use. I also have a Raspberry Pi 4 and Pico, alongside a few other I.O.T. devices. Both of my main servers are running ProxMox, which is a virtualization platform that allows me to run multiple VMs on a single physical server.\"}),`\n`,(0,s.jsx)(e.h3,{children:\"Server 1: Zeus\"}),`\n`,(0,s.jsx)(e.p,{children:(0,s.jsx)(e.em,{children:\"THE FATHER OF ALL\"})}),`\n`,(0,s.jsxs)(e.blockquote,{children:[`\n`,(0,s.jsx)(e.p,{children:\"Specs: Intel i7-6700k, 16GB DDR4, 1x 2TB SSD, 3x 2TB HDD, 2x 1TB HDD\"}),`\n`]}),`\n`,(0,s.jsx)(e.p,{children:\"Zeus is my main server, and it runs Proxmox and is where I host most of my services. Zeus is the first server I ever built, and it's been through a lot. He's spent much time with no case, He's had an AIO leak that broke a motherboard and CPU and two freak random RAM-breaking incidents. He's getting old... but still kicking on strong as ever.\"}),`\n`,(0,s.jsx)(e.p,{children:\"I have quite a few VM's running on Zeus, but the main ones are\"}),`\n`,(0,s.jsxs)(e.ul,{children:[`\n`,(0,s.jsx)(e.li,{children:\"The Storage server | TrueNas Scale\"}),`\n`,(0,s.jsx)(e.li,{children:\"The Jellyfin server | Ubuntu 22.04\"}),`\n`,(0,s.jsx)(e.li,{children:\"The Nextcloud server | Ubuntu 20.04\"}),`\n`,(0,s.jsx)(e.li,{children:\"The Plex server | Ubuntu 22.04\"}),`\n`]}),`\n`,(0,s.jsx)(e.h3,{children:\"Server 2: Poseidon\"}),`\n`,(0,s.jsx)(e.p,{children:(0,s.jsx)(e.em,{children:\"THE GOD OF THE SEA\"})}),`\n`,(0,s.jsxs)(e.blockquote,{children:[`\n`,(0,s.jsx)(e.p,{children:\"Specs: AMD FX 6300, 8GB DDR3, 250GB SSD, 2x 1TB HDD\"}),`\n`]}),`\n`,(0,s.jsx)(e.p,{children:\"Poseidon is my backup server. Hosting my backup VMs and mirrors, as well as some utilities like an email server and NGINX proxy.\"}),`\n`,(0,s.jsx)(e.h3,{children:\"Hades: The Gaming Servers\"}),`\n`,(0,s.jsx)(e.p,{children:(0,s.jsx)(e.em,{children:\"THE GOD OF THE UNDERWORLD, and mischief...\"})}),`\n`,(0,s.jsx)(e.p,{children:\"As an avid game player, it's nice to be the one to provide a place where friends can all game together without the worry of cost, complexity, or administration. This all comes down to Hades to provide from the underworld...\"}),`\n`,(0,s.jsx)(e.p,{children:\"Hades is currently one large python script run in a docker container that can create Minecraft, Rust, Valheim, and other game servers. Though most servers are more often created by hand, the Minecraft server was what started this whole shebang, and It's pretty automated at this point. Here's an overview of how it works.\"}),`\n`,(0,s.jsx)(e.p,{children:\"The majority of Hades' code is actually dedicated to gaming the cloud 'new-account-credit' system. He's a bit mischievous, you see, most cloud providers offer a free credit, often $200, to new accounts created on the platform. This is meant to attract new users, but as a college student, I see free game servers. While I won't talk too much about the specifics, it simply does four things:\"}),`\n`,(0,s.jsxs)(e.ul,{children:[`\n`,(0,s.jsx)(e.li,{children:\"Creates new user emails, contact info, and crucially credit card information\"}),`\n`,(0,s.jsx)(e.li,{children:\"Using Selenium, signs up as a new user to one of the cloud providers with free credit available\"}),`\n`,(0,s.jsx)(e.li,{children:\"In the browser, creates and provisions the server, saving the ssh keys\"}),`\n`,(0,s.jsx)(e.li,{children:\"Using the key, deploys a custom Minecraft server in docker with ITZG's docker-minecraft-server and transfer files over sftp.\"}),`\n`]}),`\n`,(0,s.jsxs)(e.blockquote,{children:[`\n`,(0,s.jsx)(e.p,{children:\"NOTE: Using a browser to automate provisioning was a BIG mistake and cuased MANY of headaches\"}),`\n`,(0,s.jsx)(e.p,{children:\"\\u201CShort cuts make long delays.\\u201D \\u2015 J.R.R. Tolkien\"}),`\n`]}),`\n`,(0,s.jsx)(e.h2,{children:\"Management\"}),`\n`,(0,s.jsx)(e.p,{children:\"This is mostly handled by Hera, but I'll go over the basics.\"}),`\n`,(0,s.jsx)(e.p,{children:\"Once the server is up, it must undergo some basic management, my local key management database can automatically find the required credentials to ssh into a server whenever needed manually, but I have also created some scripts to automate parts of this for me. For example, almost every Minecraft server I have uses a base set of plugins. I have the configs for these saved in Hades' plugin database, which now automatically uploads the best config for the installed plugins to simplify the startup management.\"}),`\n`,(0,s.jsx)(e.p,{children:\"To manage the domains and server IPs, I host all my domains on Cloudflare. Hera can detect when a new server is made by Hades and use the Cloudflare API to update the DNS records for the required domains as needed.\"}),`\n`,(0,s.jsx)(e.p,{children:\"While not the prettiest of solutions, Hades can now almost automatically deploy a free Minecraft server in minutes. I've recently been adding a feature to move the server to a new account once the 'free credits' are up, as longer-running servers are currently moved manually. Rust and Valheim servers are started less frequently and thus really only take advantage of Hades' free server provisioning features; the startup and management are much more manual.\"}),`\n`,(0,s.jsx)(e.h3,{children:\"Apollo: The Media Server\"}),`\n`,(0,s.jsx)(e.p,{children:(0,s.jsx)(e.em,{children:\"THE SON OF ZEUS AND LEADER OF THE MUSES\"})}),`\n`,(0,s.jsx)(\"center\",{children:(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:\"https://imgs.xkcd.com/comics/sony_microsoft_mpaa_riaa_apple.jpg\",alt:\"xkcd sony microsoft mpaa riaa apple\"})})}),`\n`,(0,s.jsx)(e.p,{children:\"Apollo is, at its core, a Jellyfin server, but it also hosts a Nextcloud instance, a Plex server, and a few other services. It was one of the first things I virtualized on Zeus, hence the name, and it's one of a few public-facing services. It hosts all the media I have for my family and friends to access as well as a cloud storage solution for them to use.\"}),`\n`,(0,s.jsx)(e.p,{children:\"I use both Jellyfin and Plex since, while I prefer the simplicity of Jellyfin, It doesn't have good app support, especially for TVs. Plex is not my favorite, but it has much better app support, so my family members can use it to stream to their TVs and phones. Running both is not very compute-intensive, and it's a good enough solution for now.\"}),`\n`,(0,s.jsx)(e.p,{children:\"The Jellyfin server is the main media server, and it's hosted as a VM on my physical machine: Zeus. It's a pretty standard setup. The media is stored on my personal storage server, which is also a VM on Zeus. The storage server is a simple TrueNas Scale server which the Jellyfin server is also backed up to with rsync. Plex is basically the same setup.\"}),`\n`,(0,s.jsx)(e.p,{children:\"The Nextcloud server is also hosted on the same machine as the Jellyfin server, and it's used to provide a cloud storage solution for my family and friends. It's also used to host a few other services, like a password manager.\"}),`\n`,(0,s.jsx)(e.p,{children:\"The Seedbox is a cloud-based service that I use to download media from the internet. It's a pretty standard setup, and it's hosted on a cloud provider with free credit. I happened to get lucky with the cloud provider giving me a year of free service, but after that, I'll probably move to a self-hosted seedbox.\"}),`\n`,(0,s.jsx)(e.h3,{children:\"Artemis: The Deployment Environment\"}),`\n`,(0,s.jsx)(e.p,{children:(0,s.jsx)(e.em,{children:\"THE GODDESS OF BIRTHING\"})}),`\n`,(0,s.jsx)(e.p,{children:\"Artemis gives life to my code. She is a collection of tools I use to deploy my applications. I host my own GitLab instance here, which is used to host my personal projects and to host my own GitLab CI/CD pipelines. It's hosted on a VM on my physical machine: Zeus, with backups to my storage server. I also host some non-GitLab CD pipelines, which are a collection of bash scripts and Ansible playbooks that are run whenever I push to a specific repository. These pipelines are used to deploy my applications to my physical servers.\"}),`\n`,(0,s.jsx)(e.p,{children:\"Some of the applications I host are:\"}),`\n`,(0,s.jsxs)(e.ul,{children:[`\n`,(0,s.jsx)(e.li,{children:\"Personal website\"}),`\n`,(0,s.jsx)(e.li,{children:\"Discord bots\"}),`\n`,(0,s.jsx)(e.li,{children:\"Web scraping scripts\"}),`\n`,(0,s.jsx)(e.li,{children:\"Small Minecraft server\"}),`\n`,(0,s.jsx)(e.li,{children:\"Email server\"}),`\n`,(0,s.jsx)(e.li,{children:\"A few other small projects\"}),`\n`]}),`\n`,(0,s.jsx)(e.h3,{children:\"Hephaestus: The Utility Server\"}),`\n`,(0,s.jsx)(e.p,{children:(0,s.jsx)(e.em,{children:\"THE GOD OF FIRE, METALWORKING, AND TECHNOLOGY\"})}),`\n`,(0,s.jsx)(e.p,{children:\"Hephaestus is a utility service that I use to manage a few small services. It's hosted on a VM on my physical machine: Zeus, with backups to my storage server. It manages a few utilities like my DHCP server, DNS server, email server, and a few other small services. One of its important hosts is Hestia, which I use to manage my ssh keys.\"}),`\n`,(0,s.jsx)(e.h3,{children:\"Hestia: The Key Management Database\"}),`\n`,(0,s.jsx)(e.p,{children:(0,s.jsx)(e.em,{children:\"THE GODDESS OF HEARTH\"})}),`\n`,(0,s.jsx)(e.p,{children:\"Hestia is a simple database that I use to manage my ssh keys. It's hosted on a VM on my physical machine: Zeus, with backups to my storage server. It's a simple Flask app that uses a SQLite database to store the ssh keys for my servers. It's used by Hera to get the ssh keys for a server whenever needed and can upload them to an ssh-agent. It's also used by my compute swarm to get the ssh keys for the VMs in the swarm.\"}),`\n`,(0,s.jsx)(e.h3,{children:\"Hera: The Management Infrastructure\"}),`\n`,(0,s.jsx)(e.p,{children:(0,s.jsx)(e.em,{children:\"THE GODDESS OF THE HOME\"})}),`\n`,(0,s.jsx)(e.p,{children:\"Hera is the newest and least stable part of my infrastructure. It's a collection of Ansible playbooks that I use to manage my infrastructure. It's still in development, but her main purpose is to simplify the management of my infrastructure. She\\u2019s also, as mentioned before, meant to be infrastructure agnostic, so I can deploy it to any server, and it will work. She\\u2019s currently hosted as a Debian VM on my physical machine: Zeus, with backups to my storage server.\"}),`\n`,(0,s.jsx)(e.p,{children:\"Her core functionality is to manage my physical servers, and is currently able to do the following:\"}),`\n`,(0,s.jsxs)(e.ul,{children:[`\n`,(0,s.jsx)(e.li,{children:\"Install and configure basic NGINX, NodeJS, and Docker setups for a server\"}),`\n`,(0,s.jsx)(e.li,{children:\"Obtain the ssh keys for a server from the Key Management Database\"}),`\n`,(0,s.jsx)(e.li,{children:\"Simple server management like starting, stopping, and restarting servers\"}),`\n`,(0,s.jsx)(e.li,{children:\"very basic command line interface to manage the servers\"}),`\n`]})]})}function I(t={}){let{wrapper:e}=t.components||{};return e?(0,s.jsx)(e,Object.assign({},t,{children:(0,s.jsx)(c,t)})):c(t)}var k=I;return b(T);})();\n;return Component;"
  },
  "_id": "homelab.mdx",
  "_raw": {
    "sourceFilePath": "homelab.mdx",
    "sourceFileName": "homelab.mdx",
    "sourceFileDir": ".",
    "contentType": "mdx",
    "flattenedPath": "homelab"
  },
  "type": "Post",
  "url": "/posts/homelab"
}